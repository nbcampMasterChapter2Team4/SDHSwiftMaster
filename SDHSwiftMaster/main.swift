//
//  main.swift
//  SDHSwiftMaster
//
//  Created by 서동환 on 3/17/25.
//

import Foundation

// MARK: - 필수 문제 1

Problem1.solve()

// MARK: - 필수 문제 2

Problem2.solve()

// MARK: - 필수 문제 3

Problem3.solve()

// MARK: - 도전 문제 1

print("> 도전 문제 1")

// HybridCar 인스턴스를 생성하고, switchEngine(to:) 를 호출하여 서로 다른 타입의 엔진으로 교체하는 코드를 작성해주세요.
let hybridCar = HybridCar(
    brand: "Renault",
    model: "GRAND KOLEOS(AR1)",
    year: "2024",
    engine: .HydrogenEngine
)

// HydrogenEngine ➡️ ElectricEngine으로 변경
hybridCar.switchEngine(to: .ElectricEngine)
print()
// ElectricEngine ➡️ HydrogenEngine으로 변경
hybridCar.switchEngine(to: .HydrogenEngine)
print("\n=====================================\n")

// 상속을 사용하여 기능을 추가하는 것과, 프로토콜 채택을 통해서 기능을 추가하는 것의 장단점, 차이를 고민하고 주석으로 서술해주세요.

/*
 상속을 사용해서 기능을 추가하는 것의 장점으론 첫 번째로 부모 클래스의 속성과 메서드를 자식 클래스에서 그대로 상속받을 수 있어 코드 재사용성을 높일 수 있습니다.
 두 번째로 상속을 통해 기존 클래스에 기능을 추가하거나 메서드를 오버라이드하여 특정 동작을 변경할 수 있어 유지 보수와 확장이 용이합니다.
 세 번째로 상속을 사용해 객체 계층 구조를 정의할 수 있어, 개념적으로 연관된 클래스 간의 관계를 명확히 하여 프로그램의 구조를 이해하기 쉽게 만듭니다.
 마지막으로 부모 클래스 타입의 참조를 통해 자식 클래스의 인스턴스를 다룰 수 있어, 다형성을 활용한 유연한 코드를 작성할 수 있습니다.
 
 상속을 사용하는 것에 대한 단점으론 첫 번째로 자식 클래스가 부모 클래스에 의존하게 만들어, 부모 클래스의 변경이 자식 클래스에 영향을 미칠 수 있다는 점입니다.
 두 번째로 상속 계층이 깊어질수록 클래스 구조가 복잡해져서 가독성과 관리가 어려워집니다.
 세 번째로 Swift는 단일 상속만 허용하기 때문에, 여러 부모 클래스로부터 상속이 필요할 경우 상속 대신 프로토콜을 활용해야 합니다.
 네 번째로 상속을 통해 부모 클래스의 특성을 물려받는 것은 때때로 제한적이어서 모든 상황에 적합하지 않을 수 있습니다.
 마지막으로 상속을 사용하면 부모 클래스의 내부 구현이 자식 클래스에 노출될 수 있어 캡슐화가 깨질 수 있습니다.
 
 프로토콜 채택을 통해 기능을 추가하는 것의 장점으론 첫 번째로 특정 프로토콜을 채택한 객체가 해당 프로토콜에서 정의된 요구 사항을 준수하여 일관된 방식으로 다양한 객체를 처리할 수 있게 해주며, 이를 통해 코드의 유연성과 재사용성을 높일 수 있습니다.
 두 번째로 객체의 내부 구현을 감추고, 인터페이스를 통해서만 상호작용하므로 캡슐화가 유지됩니다.
 
 프로토콜 채택의 단점으론 각 클래스가 프로토콜에 정의된 메서드를 개별적으로 구현해야 하므로, 초기 개발 시 구현 부담이 있을 수 있다는 점입니다.
 
 
 상속은 클래스 간 명확한 'is-a' 관계가 있을 때 적합합니다.
 예를 들어, Bird는 Animal의 한 종류이므로 Bird 클래스가 Animal 클래스를 상속하는 것은 적절한 사용이라고 볼 수 있습니다.
 
 그러나 여러 기능을 조합하여 객체를 구성해야 하는 경우, 상속 대신 프로토콜을 사용하는 것이 더 유리할 수 있습니다.
 예를 들어, Flyable 프로토콜을 정의하고 여러 클래스가 채택하여 fly() 메서드를 구현하게 하면 상속을 통해 깊은 계층을 형성하지 않고도 객체에 특정 기능을 부여할 수 있습니다.
 따라서 상속을 모든 상황에서 사용하기보다는 적절한 상황에 맞춰 사용하고, 필요에 따라 프로토콜을 활용하는 것이 더 유연하고 유지보수에 적합한 설계를 만드는 데 도움이 됩니다.
 */
